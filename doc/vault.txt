*vault.txt* Password management from within Vim.

             :::     :::     :::     :::    ::: :::    :::::::::::
             :+:     :+:   :+: :+:   :+:    :+: :+:        :+:
             +:+     +:+  +:+   +:+  +:+    +:+ +:+        +:+
             +#+     +:+ +#++:++#++: +#+    +:+ +#+        +#+
              +#+   +#+  +#+     +#+ +#+    +#+ +#+        +#+
               #+#+#+#   #+#     #+# #+#    #+# #+#        #+#
                 ###     ###     ###  ########  ########## ###

                   VAULT, SIMPLE PASSWORD MANAGEMENT IN VIM
                                 VERSION 0.1

1. Introduction ............................... |vault-introduction|
2. Getting Started ............................ |vault-getting-started|
3. Mappings ................................... |vault-mappings|

===============================================================================
1. Introduction                                 *vault-introduction*

Vault is a plug-in designed to allow you to very easily and simply manage a
list of credentials within Vim. Included is a straightforward syntax file
providing a basic structure for blocks of credentials utilizing Vim's
"conceal" feature to hide passwords from prying eyes.

Vault is meant to be used to manage files that are encrypted using Vim's
built-in blowfish encryption (the 'crypmethod' setting is defaulted to
"blowfish" in *.vault files), although you are welcome to use any other
on-disk encryption mechanism or simply assume that nobody will ever get their
hands on your password file. That part is up to you.

===============================================================================
2. Getting Started                              *vault-getting-started*

To begin using Vault, you need to create a credentials file. Simply edit a
file with a '.vault' extension, or set the filetype of any file to "vault".
The basic structure of vault files is as follows:

    * Sections are simply labels identifying groups of credentials. They are
      identified by any text ending with a colon, like this: >

      Section:
<
    * Actual credentials begin with double equal signs, similar to Markdown
      syntax, like this: >

      == Github
<
    * Items within credential blocks can include free-form text, lists of
      items beginning with asterisks (*), hyphens (-), or numbers, and most
      importantly some usernames and passwords. Any items beginning with
      bracketed words will get special syntax highlighting, like this: >

      [URL] http://www.github.com
      [Username] user@domain.com
      [Password] {rockyroad5!}

Feel free to format data within credential blocks in any way you desire.
Secrets should be enclosed within braces (as demonstrated by the password
above). If your Vim is compiled with "conceal" support, the contents of braces
will be obscured, replaced by a single asterisk. You can toggle the
concealment of information on the current line by pressing <Return>, but even
when the text is concealed you can still yank it, allowing you to grab your
password without onlookers even seeing it.

===============================================================================
2. Vault Mappings                               *vault-mappings*

Vault provides the following mappings for your convenience.

<CR>                Toggle the visibility of any secrets on the current line.
                    Concealing secrets requires your Vim to be compiled with
                    the "conceal" option (most modern versions have this).
                    Note that you can yank and manipulate concealed characters
                    without revealing them. yi{, for example, should yank a
                    concealed password without having to reveal it to
                    potential onlookers.

<Leader>c           Create a new credential block. The block will be inserted
                    on the line after the cursor's position and will be
                    visually selected to allow you to immediately indent it to
                    your desired depth. This is a bit of a hack to avoid
                    implementing full-on indent expressions in the vault file
                    format and give you more flexibility to format your
                    credential blocks in any way you'd like.

<Leader>pa
<Leader>pA
<Leader>pi
<Leader>pI          Insert a generated password using the insert command 'a',
                    'A', 'i', or 'I'. At this time, password generation is
                    only possible using the "pwgen" program, which you may
                    need to install. Future versions of Vault may provide this
                    functionality natively or allow it to be more easily
                    customized. This is v0.1 after all.

vim:et:tw=78:ts=4:sw=4:ft=help:norl:
